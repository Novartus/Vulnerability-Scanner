import requests
from urllib import error as urllib_error
from concurrent.futures import ThreadPoolExecutor
from report_generated import vulnerability_add, text_file_creator

# Resource for Payloads: https://github.com/payloadbox/
# Command Injection Payloads: https://book.hacktricks.xyz/pentesting-web/command-injection
# CRLF Injection Payloads: https://book.hacktricks.xyz/pentesting-web/crlf-0d-0a ,
# CRLF Injection Payloads: https://www.invicti.com/learn/crlf-injection/

executor = ThreadPoolExecutor(7)  # 7 threads
xss_list = []
sql_injection_list = []
command_injection_list = []
crlf_injection_list = []
crlf_status_code = [200, 302, 201]
xss_payload_list = ['<script>alert("XSS Success!")</script>', '<script>javascript:alert(1)<\x00/script>']
crlf_injection_payload_list = ["HTTP/1.1\r\nX-injected: header\r\nTesting: testData123",
                               "/%0atest-here-cookie:malicious_cookie"]
sql_injection_payload_list = [" OR 1=1", "3'&&SLEEP(6)"]
command_injection_payload_list = [";expr 12 + 8"]


def attacker(csv_path, report_path,  vulnerabilities):
    read_seed_csv = open(csv_path, "r")
    text_file_creator(report_path + "/report.txt")
    lines_from_file = read_seed_csv.read().split("\n")
    for read_file in lines_from_file[1:-1]:  # first line skipped
        line_array = read_file.split(",", 3)  # split the line by comma
        url_domain = line_array[1]  # website link from csv
        testing_method = line_array[2]  # method parameter
        testing_parameters = line_array[3].split(",")  # split params by comma and get list of params
        if "xss" in vulnerabilities:
            executor.submit(xss(url_domain, testing_method, testing_parameters, xss_payload_list[0]))
        if "sql" in vulnerabilities:
            executor.submit(sql_injection(url_domain, testing_method, testing_parameters, sql_injection_payload_list))
        if "command" in vulnerabilities:
            executor.submit(
                command_injection(url_domain, testing_method, testing_parameters, command_injection_payload_list))
        if "crlf" in vulnerabilities:
            executor.submit(crlf_injection(url_domain, testing_parameters, crlf_injection_payload_list))

    read_seed_csv.close()
    print("XSS List:", len(xss_list), xss_list)
    print("SQL List:", len(sql_injection_list), sql_injection_list)
    print("Command List:", len(command_injection_list), command_injection_list)
    print("CRLF List:", len(crlf_injection_list), crlf_injection_list)
    count = len(xss_list) + len(sql_injection_list) + len(command_injection_list) + len(crlf_injection_list)
    return count


def xss(url_domain, method, parameters, payload):
    global xss_list
    temp = {}
    for param in range(len(parameters)):  # Conversation for indices to integers or slices and not string
        temp[parameters[param]] = payload
        if method == "GET":
            try:
                req = requests.get(url_domain, temp)
                if str(payload) in req.text:
                    for parameter in parameters:
                        xss_temp = " Method=GET->" + " URL=" + url_domain + "?" + parameter + "=" + payload
                        if xss_temp not in xss_list:
                            xss_list.append(xss_temp)
                            vulnerability_add(url_domain, method, parameter, payload, "xss")
            except KeyError or urllib_error or requests.exceptions.TooManyRedirects:
                pass
        elif method == "POST":
            try:
                req = requests.post(url_domain, temp)
                if str(payload) in req.text:
                    for parameter in parameters:
                        xss_temp = " Method=POST->" + " URL=" + url_domain + "?" + parameter + "=" + payload
                        if xss_temp not in xss_list:
                            xss_list.append(xss_temp)
                            vulnerability_add(url_domain, method, parameter, payload, "xss")
            except urllib_error:
                pass


def crlf_injection(url_domain, parameters, payloads):
    global crlf_injection_list
    for payload in payloads:
        crlf_temp = {}
        for param in range(len(parameters)):
            crlf_temp[parameters[param]] = payload
            try:
                req = requests.get(url_domain + payload, crlf_temp, timeout=4)
                print("Found", req.headers['test-here-cookie'])
                if req.headers['test-here-cookie'] == "malicious_cookie":
                    crlf_temp = " URL=" + url_domain + payload
                    if crlf_temp not in crlf_injection_list:
                        print("CRLF Success! URL=", url_domain + payload)
                        crlf_injection_list.append(crlf_temp)
                        vulnerability_add(url_domain, "N/A", "parameters", payload, "crlf")
            except KeyError or urllib_error or requests.exceptions.TooManyRedirects:
                print("CRLF Injection Failed! URL:", url_domain + payload)
                break


def sql_injection(url_domain, method, parameters, payloads):
    global sql_injection_list
    for payload in payloads:
        sql_temp = {}
        for param in range(len(parameters)):  # Conversation for indices to integers or slices and not string
            sql_temp[parameters[param]] = payload
            success_get = "SQL Injection Success! GET -> URL:", url_domain, "Payload:", payload
            success_post = "SQL Injection Success! POST -> URL:", url_domain, "Payload:", payload
            if method == "GET" and success_get not in sql_injection_list:
                try:
                    requests.get(url_domain, sql_temp, timeout=6)
                except requests.exceptions.Timeout:
                    sql_injection_list.append(success_get)
                    vulnerability_add(url_domain, "GET", parameters[param], payload, "sql")
                    break
            elif method == "POST" and success_post not in sql_injection_list:
                try:
                    requests.post(url_domain, sql_temp, timeout=6)
                except requests.exceptions.Timeout:
                    sql_injection_list.append(success_post)
                    vulnerability_add(url_domain, "POST", parameters[param], payload, "sql")
                    break


def command_injection(url_domain, method, parameters, payloads):
    global command_injection_list
    for payload in payloads:
        command_temp = {}
        for param in range(len(parameters)):
            command_temp[parameters[param]] = payload
            success_get = "Command Injection Success! GET -> URL:", url_domain, "Payload:", payload
            success_post = "Command Injection Success! POST -> URL:", url_domain, "Payload:", payload
            if method == "GET" and success_get not in command_injection_list:
                req = requests.get(url_domain, command_temp)
                if "20" in req.text:
                    command_injection_list.append(success_get)
                    vulnerability_add(url_domain, "GET", parameters[param], payload, "command")
                    break
            elif method == "POST" and success_post not in command_injection_list:
                req = requests.post(url_domain, command_temp, timeout=6)
                if "20" in req.text:
                    command_injection_list.append(success_post)
                    vulnerability_add(url_domain, "POST", parameters[param], payload, "command")
                    break
