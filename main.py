import tkinter as tk
import validators
import os
import time
import urllib.parse
import threading
from tkinter import ttk
from crawler import crawler


class App(tk.Tk):
    ERROR = 'Error.TLabel'
    SUCCESS = 'Success.TLabel'

    # Test URL : http://php.testsparker.com/hello.php?name=Visitor

    def __init__(self):  # initialize the class
        super().__init__()  # initialize the super class
        self.message_label = None
        self.button_state = 'normal'
        self.title('Vulnerabilities Scanner')
        self.geometry("330x230")
        self.url_var = tk.StringVar()
        self.xss_agreement = tk.StringVar()
        self.sql_agreement = tk.StringVar()
        self.command_agreement = tk.StringVar()
        self.crlf_agreement = tk.StringVar()

        self.columnconfigure(0, weight=1)
        self.columnconfigure(1, weight=1)
        self.columnconfigure(2, weight=1)

        self.style = ttk.Style(self)
        self.style.configure('Error.TLabel', foreground='red')
        self.style.configure('Success.TLabel', foreground='green')
        self.create_widgets()

    def create_widgets(self):
        padding = {'padx': 5, 'pady': 5, 'sticky': tk.W}

        self.message_label = ttk.Label(self)
        self.message_label.grid(column=0, row=0, columnspan=3, **padding)

        ttk.Label(self, text='Website:').grid(column=0, row=1, **padding)

        url_entry = ttk.Entry(self, textvariable=self.url_var)
        url_entry.grid(column=1, row=1, **padding)
        url_entry.focus()

        check_button = ttk.Button(self, text='Check', command=self.validate)
        check_button.grid(column=0, row=3, **padding)
        check_button['state'] = self.button_state

        xss_check = ttk.Checkbutton(self, text='XSS', command=self.set_checkbutton_state,
                                    variable=self.xss_agreement,
                                    onvalue='agree', offvalue='disagree')
        xss_check.grid(column=1, row=2, **padding)

        sql_injection = ttk.Checkbutton(self, text='SQL Injection', command=self.set_checkbutton_state,
                                        variable=self.sql_agreement,
                                        onvalue='agree', offvalue='disagree')
        sql_injection.grid(column=1, row=3, **padding)

        command_injection = ttk.Checkbutton(self, text='Command Injection', command=self.set_checkbutton_state,
                                            variable=self.command_agreement,
                                            onvalue='agree', offvalue='disagree')
        command_injection.grid(column=1, row=4, **padding)

        crlf_injection = ttk.Checkbutton(self, text='CRLF Injection', command=self.set_checkbutton_state,
                                         variable=self.crlf_agreement,
                                         onvalue='agree', offvalue='disagree')
        crlf_injection.grid(column=1, row=5, **padding)

    def set_message(self, message, type=None):
        self.message_label['text'] = message
        if type:
            self.message_label['style'] = type

    def set_checkbutton_state(self):
        if self.xss_agreement.get() == 'agree':
            print("XSS is checked")
        if self.sql_agreement.get() == 'agree':
            print("SQL Injection is checked")
        if self.command_agreement.get() == 'agree':
            print("Command Injection is checked")
        if self.crlf_agreement.get() == 'agree':
            print("CRLF Injection is checked")
        self.create_widgets()

    def set_button_state(self, state):
        self.button_state = state
        self.create_widgets()

    def validate(self):
        self.set_message(None)
        url = self.url_var.get()
        if not validators.url(url):
            self.set_message("Error: Invalid URL, Please Enter Valid URL", self.ERROR)
            return
        else:
            self.set_message("Checking for vulnerabilities, Please wait...", self.SUCCESS)
            self.set_button_state('disabled')
            vulnerabilities = []
            if self.xss_agreement.get() == 'agree':
                vulnerabilities.append('xss')
            if self.sql_agreement.get() == 'agree':
                vulnerabilities.append('sql')
            if self.command_agreement.get() == 'agree':
                vulnerabilities.append('command')
            if self.crlf_agreement.get() == 'agree':
                vulnerabilities.append('crlf')
            if not vulnerabilities:
                self.set_message("Error: Please select at least one vulnerability", self.ERROR)
                self.set_button_state('normal')
                return
            url_domain = urllib.parse.urlsplit(url).netloc  # Parse the URL and get domain
            report_path = url_domain + "_" + time.strftime("%Y%m%d-%H%M%S")  # Create the file path
            report_dir = "./vulnerabilities-reports/" + "/" + report_path  # Create the directory
            os.makedirs(report_dir)
            thread = threading.Thread(target=crawler(url, report_dir, vulnerabilities))
            thread.start()
            self.after(3000, lambda: self.set_message("Report saved in " + os.path.abspath(report_dir), self.SUCCESS))
            self.after(3000, lambda: self.set_button_state('normal'))
            return


if __name__ == "__main__":
    app = App()
    app.mainloop()
